name: zimbabwe_gold_exchange_rates

services:
  web_prod:
    container_name: zger_web_prod
    image: icep0ops/zger_web_prod
    build:
      context: ./web
      dockerfile: Dockerfile.prod
    env_file:
      - ./web/.env.production
    environment:
      NODE_ENV: production
    restart: unless-stopped
    depends_on:
      api_prod:
        condition: service_healthy
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.zger.rule=Host(`zimbabwegoldexchangerates.docker.localhost`)"
      - "traefik.http.routers.zger.entrypoints=websecure"
      - "traefik.http.routers.zger.tls=true"

  api_prod:
    container_name: zger_api_prod
    image: icep0ops/zger_api_prod
    build:
      context: ./api
      dockerfile: Dockerfile.prod
    expose:
      - "3001"
    env_file:
      - ./database/.env.production
      - ./api/.env
    environment:
      NODE_ENV: production
    restart: unless-stopped
    depends_on:
      database_prod:
        condition: service_healthy
    healthcheck:
      test:
        ["CMD", "curl", "-f", "-s", "http://localhost:3001/api/v1/currencies"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - proxy

  database_prod:
    container_name: zger_db_prod
    image: icep0ops/zger_db_prod
    build:
      context: ./database
    volumes:
      - zbr-postgres-data-prod:/var/lib/postgresql/data
    env_file:
      - ./database/.env.production
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d zger"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - proxy

  watchtower:
    image: containrrr/watchtower
    container_name: zger_watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 300
    restart: unless-stopped
    networks:
      - proxy

  traefik:
    image: traefik:v3.4
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/certs:ro
      - ./dynamic:/dynamic:ro

    command:
      # EntryPoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"

      # Attach the static configuration tls.yaml file that contains the tls configuration settings
      - "--providers.file.filename=/dynamic/tls.yaml"

      # Providers
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=proxy"

      # API & Dashboard
      - "--api.dashboard=true"
      - "--api.insecure=false"

      # Observability
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"

    # Traefik Dynamic configuration via Docker labels
    labels:
      # Enable self‑routing
      - "traefik.enable=true"

      # Dashboard router
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.docker.localhost`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls=true"

      # Basic‑auth middleware
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=admin:$$apr1$$s8tdYyBg$$rxZaC.e9te.5Axos8KS5U0"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth@docker"

    networks:
      - proxy

volumes:
  zbr-postgres-data-prod:

networks:
  proxy:
    name: proxy
